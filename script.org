#+TITLE: MSnbase2 - disk access is the limit
#+AUTHOR: Laurent Gatto and Johannes Rainer

* Introduction

Find this script at 

  https://github.com/lgatto/EuroBioc2016-Basel-MSnbase2

Most (if not all) of what I will be showing today was implemented by
Johannes Rainer and Laurent Gatto during summer 2016 and was released
in October 2016 in [[http://bioconductor.org/packages/release/bioc/html/MSnbase.html][MSnbase]] version 2.0.

* The =MSnExp= class

An =MSnExp= is a mean to store raw data (i.e. spectra) and metadata
from 1 or more mass spectrometry (MS) acquisitions. It looks like
this:

#+BEGIN_SRC R :session *R* :results none
  suppressPackageStartupMessages(library("MSnbase"))
  getClass("MSnExp")
#+END_SRC

(See =?MSnExp= and the [[http://bioconductor.org/packages/release/bioc/vignettes/MSnbase/inst/doc/MSnbase-development.pdf][MSnbase development]] vignette for details.)

The original *in-memory* implementation imported all spectra as
=Spectrum1= (or =Spectrum2=) objects in the =assayData= environment,
with the obvious effect of consuming quite a bit of memory.

*Example*: On a server with 128 Gb RAM, loading all MS2 spectra from
14 LC-MSMS acquistions (4.9 Gb on disk) took 90 minutes and resulted
in a 3.3 Gb raw data object. That's a reasonable data set from 4 years
ago.

* Keeping data on disk

The =mzR= package uses C/C++ code for fast and random on-disk access
of the raw XML-based data files (=mzML=, =mzXML=, ...). This is what
enables a new *on-disk* version of the =MSnExp= class, called
=OnDiskMSnExp= (which extends =MSnExp=).

#+BEGIN_SRC R :session *R* :results none
  getClass("OnDiskMSnExp")
#+END_SRC

(See =?OnDiskMSnExp= and the [[http://bioconductor.org/packages/release/bioc/vignettes/MSnbase/inst/doc/MSnbase-development.pdf][MSnbase development]] vignette for details.)

* Demo and benchmarking

#+BEGIN_SRC R :session *R* :results none
  setMSnbaseVerbose(FALSE)
  basename(f <- msdata::proteomics(full.names = TRUE)[1])
  cat("On disk\n")
  on <- readMSData2(f[1]) ## on disk
  cat("In memory\n")
  im <- readMSData(f[1])  ## in memory
#+END_SRC

#+BEGIN_SRC R :session *R* :results none
on
im
#+END_SRC

Both have the same API (so far at least).

See the MSnbase [[http://bioconductor.org/packages/devel/bioc/vignettes/MSnbase/inst/doc/benchmarking.html][benchmarking]] vignette

1. reading data
2. object size
3. accessing spectra
4. subsetting expriments
5. (quantitation)

* A bit more about the implementation

** Feature data

**** What we have

#+BEGIN_SRC R :session *R* :results none
fvarLabels(im)
#+END_SRC

#+BEGIN_SRC R :session *R* :results none
fvarLabels(on)
#+END_SRC

**** And how we use it

These are used is the filtering functions whenever possible.

#+BEGIN_SRC R :session *R* :results none
  length(on)
  table(msLevel(on))
  length(filterMsLevel(on, 3L))
#+END_SRC

** Processing queue

Whenever possible, access to data is delayed. 

#+BEGIN_SRC R :session *R*
  library("magrittr")
  on2 <- on %>%
      filterMsLevel(3L) %>%
      filterMz(c(126, 132))
  on2

  setMSnbaseVerbose(TRUE)
  plot(on[["X009.1"]], full = TRUE, centroided = FALSE)
  plot(on2[["X009.1"]], full = TRUE, centroided = FALSE)
#+END_SRC

** Parallelisation

Systematic use of =BiocParallel=.

** C-level code

On-the-fly construction of spectra is done using C-level
constuctors. This is much faster, mostly due to bypassing method
dispatching and the validity check.

** Validity

The default =validObject= doesn't verify the validity on the spectra
(as there aren't any to check). Hence, we have a
=validateOnDiskMSnExp= function that instantiates all spectra and
checks their validity (in addition to calling =validObject=).

#+BEGIN_SRC R :session *R* :results none
  validObject(on)
  validateOnDiskMSnExp(on)
#+END_SRC

** Serialisation

- Yes for in-memory, no for on-disk. 
- But on-disk can be coerced to in-memory with =as(on2, "MSnExp")=.

* More new features:
- Can store any combination of MS levels (in-memory =MSnExp= can only
  cope with a single level at a time.)

#+BEGIN_SRC R :session *R*
table(msLevel(on))
#+END_SRC

#+RESULTS:
| 1 |  25 |
| 2 | 270 |
| 3 | 270 |

- Heavy disk access lead to unconvering (and fixing) a few bugs in
  =mzR=!

- Consistent filtering functions

#+BEGIN_SRC R :session *R*
grep("^filter", ls("package:MSnbase"), value = TRUE)
#+END_SRC

#+RESULTS:
| filterAcquisitionNum |
| filterFile           |
| filterMsLevel        |
| filterMz             |
| filterNA             |
| filterRt             |
| filterZero           |

* Conclusion

- =MSnExp= were focused with providing convenient access to raw and
  meta-data. =OnDiskMSnExp= focus on speed and efficiency.

- Currently both co-exists, with identical (similar) APIs

- This will lead to more common infrastructure/collaboration between
  proteomics and metabolomics (=xcms3= will be using =OnDiskMSnExp=
  objects).

* Acknowledgements

- [[http://lgatto.github.io/msnbase-contribs/][MSnbase contributors]], in particular Sebastian Gibb
- Funding: [[http://www.bbsrc.ac.uk/][Biotechnology and Biological Sciences Research Council]]

     *Thank you for your attention!*

